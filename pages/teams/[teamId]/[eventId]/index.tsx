import { css } from '@emotion/react';
import { GetServerSidePropsContext } from 'next';
import Head from 'next/head';
import { useState } from 'react';
import * as FaIcons from 'react-icons/fa';
import Layout from '../../../../components/Layout';
import SubMenu from '../../../../components/SubMenu';
import {
  getAllMembersNamesByTeamId,
  getAllResponsesForEvent,
  getEventByEventId,
  getUserByValidSessionToken,
} from '../../../../util/database';
import {
  firstEventResponse,
  pushFirstEventResponse,
} from '../../../../util/functions';
import {
  darkBlue,
  largeText,
  lightBlue,
  lightGrey,
} from '../../../../util/sharedStyles';

type Props = {
  username: String;
  event: Event[];
  userRoleId: Number;
  allMembers: Member[];
  allResponsesForEvent: Response[];
};

type Response = {
  usersId: number;
  userFirstName: string;
  userLastName: string;
  response: string;
};

type Member = {
  id: Number;
  userFirstName: String;
  userLastName: String;
};

type Event = {
  id: number;
  eventType: string;
  teamId: number;
  startDay: string;
  endDay: string;
  startTime: string;
  endTime: string;
  meetingTime: string;
  eventLocation: string;
  eventDescription: string;
};

type UpdateEventResponse = {
  usersId: Number;
  eventId: Number;
  response: String;
};

const mainContainer = css`
  width: 100%;
  display: flex;
`;

const subMenu = css`
  width: 25%;
  position: static;
  display: flex;
  justify-content: flex-start;
  background: ${lightGrey};
  padding: 20px;
  border-right: 2px solid ${darkBlue};
`;

const eventContainer = css`
  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;

  div {
    display: flex;

    h1 {
      margin: 40px 0;
    }

    h2 {
      font-size: ${largeText};
      margin-top: 20px;
    }
  }

  table {
    text-align: center;
    width: 90%;
    margin: 20px 0 40px 0;

    th {
      background: ${lightBlue};
      color: white;
      padding: 10px;
    }
  }
`;

export default function SingleEventPage(props: Props) {
  const [allPlayers, setAllPlayers] = useState(props.allMembers);
  const [allResponses, setAllResponses] = useState(props.allResponsesForEvent);

  return (
    <>
      <Head>
        <title>Team Vision</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout username={props.username} />
      <div css={mainContainer}>
        <div css={subMenu}>
          <SubMenu
            userRoleId={props.userRoleId}
            teamId={props.event[0].teamId}
          />
        </div>
        <div css={eventContainer}>
          <div>
            <h1>{props.event[0].eventType}</h1>
            <h2>{props.event[0].startDay}</h2>
            {/* {event.startDay === event.endDay ? (
                 <h3>{event.startDay}</h3>
                ) : (
               <h3>
               {event.startDay} - {event.endDay}
                </h3>
              )} */}

            <h3>{props.event[0].endDay}</h3>
            <h3>{props.event[0].meetingTime}</h3>
            <h3>{props.event[0].startTime}</h3>
            <h3>{props.event[0].endDay}</h3>
            <h3>{props.event[0].eventLocation}</h3>
            {/* <h3>{props.event[0].eventDescription}</h3> */}
          </div>

          <h2>Attending Players</h2>
          <table>
            <thead>
              <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Edit Response</th>
              </tr>
            </thead>
            <tbody>
              {allResponses
                .filter((response) => response.response === 'Yes')
                .map((response) => {
                  return (
                    <tr key={response.usersId}>
                      <td>{response.userFirstName}</td>
                      <td>{response.userLastName}</td>
                      <td>
                        <button>
                          <FaIcons.FaQuestion size={20} />
                        </button>
                        <button>
                          <FaIcons.FaThumbsDown size={20} />
                        </button>
                      </td>
                    </tr>
                  );
                })}
            </tbody>
          </table>

          <h2>Possibly attending Players</h2>
          <table>
            <thead>
              <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Edit Response</th>
              </tr>
            </thead>
            <tbody>
              {allResponses
                .filter((response) => response.response === 'Maybe')
                .map((response) => {
                  return (
                    <tr key={response.usersId}>
                      <td>{response.userFirstName}</td>
                      <td>{response.userLastName}</td>
                      <td>
                        <button>
                          <FaIcons.FaThumbsUp size={20} />
                        </button>
                        <button>
                          <FaIcons.FaThumbsDown size={20} />
                        </button>
                      </td>
                    </tr>
                  );
                })}
            </tbody>
          </table>

          <h2>Non attending Players</h2>
          <table>
            <thead>
              <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Edit Response</th>
              </tr>
            </thead>
            <tbody>
              {allResponses
                .filter((response) => response.response === 'No')
                .map((response) => {
                  return (
                    <tr key={response.usersId}>
                      <td>{response.userFirstName}</td>
                      <td>{response.userLastName}</td>
                      <td>
                        <button>
                          <FaIcons.FaQuestion size={20} />
                        </button>
                        <button>
                          <FaIcons.FaThumbsDown size={20} />
                        </button>
                      </td>
                    </tr>
                  );
                })}
            </tbody>
          </table>

          <h2>Awaiting Players</h2>
          <table>
            <thead>
              <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Edit Response</th>
              </tr>
            </thead>
            <tbody>
              {allPlayers.map((player) => {
                return (
                  <tr key={player.id}>
                    {/* {allResponses.includes(player.id)} */}
                    <td>{player.userFirstName}</td>
                    <td>{player.userLastName}</td>
                    <td>
                      <div>
                        <button
                          onClick={async (event) => {
                            event.preventDefault();

                            const response = await fetch(
                              `/api/teams-by-team-id/single-event`,
                              {
                                method: 'POST',
                                headers: {
                                  'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({
                                  usersId: player.id,
                                  eventId: props.event[0].id,
                                  response: 'Yes',
                                }),
                              },
                            );

                            const json =
                              (await response.json()) as UpdateEventResponse;

                            setAllResponses(
                              pushFirstEventResponse(
                                player.id,
                                allResponses,
                                allPlayers,
                              ),
                            );

                            // set the state to the result of the function
                            setAllPlayers(
                              firstEventResponse(player.id, allPlayers),
                            );
                          }}
                        >
                          <FaIcons.FaThumbsUp size={20} />
                        </button>
                        <button
                          onClick={async (event) => {
                            event.preventDefault();

                            const response = await fetch(
                              `/api/teams-by-team-id/single-event`,
                              {
                                method: 'POST',
                                headers: {
                                  'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({
                                  usersId: player.id,
                                  eventId: props.event[0].id,
                                  response: 'Maybe',
                                }),
                              },
                            );

                            const json =
                              (await response.json()) as UpdateEventResponse;
                          }}
                        >
                          <FaIcons.FaQuestion size={20} />
                        </button>
                        <button
                          onClick={async (event) => {
                            event.preventDefault();

                            const response = await fetch(
                              `/api/teams-by-team-id/single-event`,
                              {
                                method: 'POST',
                                headers: {
                                  'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({
                                  usersId: player.id,
                                  eventId: props.event[0].id,
                                  response: 'No',
                                }),
                              },
                            );

                            const json =
                              (await response.json()) as UpdateEventResponse;
                          }}
                        >
                          <FaIcons.FaThumbsDown size={20} />
                        </button>
                      </div>
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>
      </div>
    </>
  );
}

export async function getServerSideProps(context: GetServerSidePropsContext) {
  const eventId = context.query.eventId;
  const event = await getEventByEventId(Number(eventId));

  // get UserRole Id which parts of the app the user is allowed to see
  const sessionToken = context.req.cookies.sessionToken;
  const user = await getUserByValidSessionToken(sessionToken);
  const userRoleId = user?.userRoleId;

  // get all members of team
  const teamId = context.query.teamId;
  const allMembers = await getAllMembersNamesByTeamId(Number(teamId));

  const allResponsesForEvent = await getAllResponsesForEvent(Number(eventId));

  return {
    props: {
      event,
      userRoleId,
      allMembers,
      allResponsesForEvent,
    },
  };
}
