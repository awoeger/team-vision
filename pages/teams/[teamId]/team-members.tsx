/* eslint-disable @typescript-eslint/no-unused-vars */
import { css } from '@emotion/react';
import { GetServerSidePropsContext } from 'next';
import Head from 'next/head';
import { useState } from 'react';
import * as BsIcons from 'react-icons/bs';
import * as FaIcons from 'react-icons/fa';
import Layout from '../../../components/Layout';
import SubMenu from '../../../components/SubMenu';
import { getUserByValidSessionToken } from '../../../util/database';
import { largeText, orange } from '../../../util/sharedStyles';

type Props = {
  username: String;
  teamId: Number;
  allMembers: Member[];
  userRoleId: Number;
};

type Member = {
  id: Number;
  experienceLevel: String;
  playerMessage: String;
  playingSince: String;
  positionOnTeam: String;
  statusId: Number | String;
  userFirstName: String;
  userLastName: String;
};

export type UpdateRequestResponse = {
  statusId: number;
};

export type DeclinedPlayerRequestResponse = {
  id: number;
};

const mainContainer = css`
  width: 100%;
  display: flex;
`;

const teamMembersContainer = css`
  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;

  h1 {
    margin: 40px 0;
  }

  h2 {
    font-size: ${largeText};
    margin-top: 20px;
    display: flex;
    align-items: center;

    span {
      margin-left: 20px;
    }
  }

  table {
    text-align: center;
    width: 90%;
    margin: 20px 0 40px 0;

    th {
      color: white;
      padding: 10px;
    }

    td {
      padding: 10px;
    }

    button {
      margin: 5px 10px;
      padding: 8px;
      border-radius: 100%;
      color: white;
      border: none;
      box-shadow: rgba(0, 0, 0, 0.25) 0px 5px 10px,
        rgba(0, 0, 0, 0.22) 0px 5px 5px;
    }
  }
`;

const acceptedMembers = css`
  background: #0ea70e;
`;

const awaitingMembers = css`
  background: #ffa500;
`;

const acceptButton = css`
  background: rgb(14 167 14 / 60%);

  :hover,
  :active {
    background: #0ea70e;
  }
`;

const declineButton = css`
  background: rgb(253 60 1 / 70%);

  :hover,
  :active {
    background: ${orange};
  }
`;

export default function TeamMembers(props: Props) {
  const [members, setMembers] = useState(props.allMembers);

  return (
    <>
      <Head>
        <title>Team Vision - Team Members</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout username={props.username} />
      <SubMenu userRoleId={props.userRoleId} teamId={props.teamId} />
      <div css={mainContainer}>
        <div css={teamMembersContainer}>
          <h1>Team Members</h1>
          <h2>
            <BsIcons.BsPersonCheckFill size={25} />{' '}
            <span>
              Accepted Members -{' '}
              {members.filter((member) => member.statusId === 1).length}
            </span>
          </h2>
          <table>
            <tr css={acceptedMembers}>
              <th>First Name</th>
              <th>Last Name</th>
              <th>Playing since</th>
              <th>Experience level</th>
              <th>Position on the team</th>
              <th>Message to the coach</th>
              <th>Delete</th>
            </tr>
            {members
              .filter((member) => member.statusId === 1)
              .map((member) => {
                return (
                  <tr key={member.id}>
                    <td>{member.userFirstName}</td>
                    <td>{member.userLastName}</td>
                    <td>{member.playingSince}</td>
                    <td>{member.experienceLevel}</td>
                    <td>{member.positionOnTeam}</td>
                    <td>{member.playerMessage}</td>
                    <button
                      css={declineButton}
                      onClick={async (event) => {
                        event.preventDefault();

                        const response = await fetch(
                          `/api/teams-by-team-id/team-members`,
                          {
                            method: 'DELETE',
                            headers: {
                              'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                              id: member.id,
                            }),
                          },
                        );

                        const json =
                          (await response.json()) as DeclinedPlayerRequestResponse;

                        // Delete Member on the frontend on decline button click
                        const declineMember = () => {
                          // create a copy of the allmembers array
                          const newMemberArray = [...members];
                          // find the person.id that has been clicked on
                          const deletedMember = newMemberArray.find(
                            (m) => m.id === member.id,
                          );
                          // get the index of the person in the copy of the array
                          const deletedMemberIndex =
                            newMemberArray.indexOf(deletedMember);
                          // splice the index out of the array
                          if (deletedMember) {
                            newMemberArray.splice(deletedMemberIndex, 1);
                          }

                          return newMemberArray;
                        };
                        // set the state to the result of the function
                        setMembers(declineMember());
                      }}
                    >
                      <BsIcons.BsTrashFill size={20} />
                    </button>
                  </tr>
                );
              })}
          </table>
          <h2>
            <BsIcons.BsFillPersonFill size={25} />{' '}
            <span>
              Awaiting Players -{' '}
              {members.filter((member) => member.statusId === 3).length}
            </span>
          </h2>
          <table>
            <thead>
              <tr css={awaitingMembers}>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Playing since</th>
                <th>Experience level</th>
                <th>Position on the team</th>
                <th>Message to the coach</th>
                <th>Change Status</th>
              </tr>
            </thead>
            <tbody>
              {members
                .filter((member) => member.statusId === 3)
                .map((member) => {
                  return (
                    <tr key={member.id}>
                      <td>{member.userFirstName}</td>
                      <td>{member.userLastName}</td>
                      <td>{member.playingSince}</td>
                      <td>{member.experienceLevel}</td>
                      <td>{member.positionOnTeam}</td>
                      <td>{member.playerMessage}</td>
                      <td>
                        <div>
                          <button
                            css={acceptButton}
                            onClick={async (event) => {
                              event.preventDefault();
                              const response = await fetch(
                                `/api/teams-by-team-id/team-members`,
                                {
                                  method: 'POST',
                                  headers: {
                                    'Content-Type': 'application/json',
                                  },
                                  body: JSON.stringify({
                                    id: member.id,
                                  }),
                                },
                              );

                              const json =
                                (await response.json()) as UpdateRequestResponse;

                              const acceptMember = () => {
                                // create a copy of the allmembers array
                                const newMemberArray = [...members];
                                // find the person.id that has been clicked on
                                const acceptedMember = newMemberArray.find(
                                  (m) => m.id === member.id,
                                );
                                // Change the status number to accepted
                                if (acceptedMember) {
                                  acceptedMember.statusId = 1;
                                }

                                return newMemberArray;
                              };
                              // set the state to the result of the function
                              setMembers(acceptMember());
                            }}
                          >
                            <FaIcons.FaCheck size={20} />
                          </button>
                          <button
                            css={declineButton}
                            onClick={async (event) => {
                              event.preventDefault();
                              const response = await fetch(
                                `/api/teams-by-team-id/team-members`,
                                {
                                  method: 'DELETE',
                                  headers: {
                                    'Content-Type': 'application/json',
                                  },
                                  body: JSON.stringify({
                                    id: member.id,
                                  }),
                                },
                              );

                              const json =
                                (await response.json()) as DeclinedPlayerRequestResponse;

                              // Delete Member on the frontend on decline button click
                              const declineMember = () => {
                                // create a copy of the allmembers array
                                const newMemberArray = [...members];
                                // find the person.id that has been clicked on
                                const deletedMember = newMemberArray.find(
                                  (m) => m.id === member.id,
                                );
                                // get the index of the person in the copy of the array
                                const deletedMemberIndex =
                                  newMemberArray.indexOf(deletedMember);
                                // splice the index out of the array
                                if (deletedMember) {
                                  newMemberArray.splice(deletedMemberIndex, 1);
                                }

                                return newMemberArray;
                              };
                              // set the state to the result of the function
                              setMembers(declineMember());
                            }}
                          >
                            <BsIcons.BsTrashFill size={20} />
                          </button>
                        </div>
                      </td>
                    </tr>
                  );
                })}
            </tbody>
          </table>
        </div>
      </div>
    </>
  );
}

export async function getServerSideProps(context: GetServerSidePropsContext) {
  const teamId = context.query.teamId;

  const response = await fetch(
    `${process.env.API_BASE_URL}/teams-by-team-id/${teamId}`,
    {
      method: 'GET',
    },
  );

  const json = await response.json();

  const sessionToken = context.req.cookies.sessionToken;
  const user = await getUserByValidSessionToken(sessionToken);
  const userRoleId = user?.userRoleId;

  return {
    props: {
      teamId,
      ...json,
      userRoleId,
    },
  };
}
